# -*- coding: utf-8 -*-
"""Data Visualization

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nbhmHqblXHMDV2dMsAR_CEq3Y1jYyF_f

# **INTRODUCTION TO MATPLOTLIB**
Matplotlib is a 2D plotting library available in Python.

## Getting Started
You can download the library in your system using the following command in your command line :

*`pip install matplotlib`*

### Importing the **pyplot** module from matplotlib
"""

#Importing the Pyplot module from the Matplotlib Library which we will using to plot our graphs
from matplotlib import pyplot as plt

# 'plt' is a naming convention but you can name pyplot as per your wish too.

"""### 1. Single Line Graph
You can plot a graph in two ways
"""

""" Way 1  """

# Data for the x-axis
x_data = [5, 22, 23, 24, 26, 27]

#Data for the y-axis
y_data = [0, 14, 14, 12, 14, 17]

#Plot the graph
plt.plot(x_data,y_data)
#To display the graph
plt.show()

""" Way 2 """

#Direct Plotting
plt.plot([5, 22, 23, 24, 26, 27],[0, 14, 14, 12, 14, 17])

#Dispaly the figure
plt.show()

"""### 2. Adding Title , Labels to the Graph"""

# Data for the x-axis showing CA marks of 6 students
CA = [5, 22, 23, 24, 26, 27]

#Data for the y-axis showing MidTerm Marks for 6 students
MST = [0, 14, 14, 12, 14, 17]
#Plot the graph
plt.plot(CA, MST)

#Adding Labels to the graph

#Adding the label to the x-axis
plt.xlabel("CA Marks")

#Adding the label to the y-axis
plt.ylabel("MidTerm Marks")

#Adding Title
plt.title("CA vs MidTerm Marks")


#To display the graph
plt.show()

"""### 3. Multiple Line Graph
Plotting two graphs on the same canvas
"""

""" Plotting Two Line Graphs """

#Plotting Graph-1
plt.plot([5, 22, 23, 24, 26, 27],[0, 14, 14, 12, 14, 17])

#Plotting Graph-2
plt.plot([5, 22, 23, 24, 26, 27],[7, 14, 15, 16, 17, 18])

#To add two graphs to your canvas, you can use the plot() function twice.

#Showing the plot
plt.show()

"""### 4. Adding Title, Label and Legend to the Graphs"""

# Collecting Data

CA = [5, 22, 23, 24, 26, 27]

subject_1 = [0, 14, 14, 12, 14, 17]
subject_2= [7, 14, 15, 16, 17, 18]


#Plotting the Graphs

#Plotting Graph-1
plt.plot(CA,subject_1)

#Plotting Graph-2
plt.plot(CA,subject_2)

#Labeling the Graphs' axis and Giving a title to the graph
plt.xlabel("CA Marks")
plt.ylabel("MidTerm Marks")
plt.title("CA Marks vs MidTerm Marks")


#Displaying the graph on the output console.
plt.show()

"""#### 4.1 Adding Legends to the Graph
Legends are added to describe the parts of a graph/chart.
There are two ways to add a legend to the Graph
"""

""" WAY 1 """
# Collecting Data

CA = [5, 22, 23, 24, 26, 27]

subject_1 = [0, 14, 14, 12, 14, 17]
subject_2= [7, 14, 15, 16, 17, 18]


#Plotting the Graphs

#Plotting Graph-1
plt.plot(CA,subject_1)

#Plotting Graph-2
plt.plot(CA,subject_2)

#Labeling the Graphs' axis and Giving a title to the graph
plt.xlabel("CA Marks")
plt.ylabel("MidTerm Marks")
plt.title("CA vs Mid Term Marks")

#Adding Legend to the Graphs
""" Note: You need to take care of the order in which the graphs are plotted """
plt.legend(['Subject-1','Subject-2'])

#Displaying the graph on the output console.
plt.show()

""" WAY 2 - A good way to add legend """
# Collecting Data

CA = [5, 22, 23, 24, 26, 27]

subject_1 = [0, 14, 14, 12, 14, 17]
subject_2= [7, 14, 15, 16, 17, 18]


#Plotting the Graphs

#Plotting Graph-1
plt.plot(CA,subject_1, label="Subject-1")
""" Perk : Adding a label also self documents your plot. """

#Plotting Graph-2
plt.plot(CA,subject_2, label="Subject-2")

#Labeling the Graphs' axis and Giving a title to the graph
plt.xlabel("CA Marks")
plt.ylabel("MidTerm Marks")
plt.title("CA Marks vs MidTerm Marks")

#Adding Legend
""" More effective way as you don't need to take care of the order in which the graphs are plotted """
plt.legend()

#Displaying the graph on the output console.
plt.show()

"""### 5. Adding/Removing Grid to/from Graphs
You can add grids to your graphs just like your Graph Notebooks using the following command:


```
pyplot.grid(True)
```

You can remove grids from your graphs using the following command:


```
pyplot.grid(False)
```
"""

#Collecting Data
CA = [5, 22, 23, 24, 26, 27]
MST = [0, 14, 14, 12, 14, 17]


#Plotting the graph
plt.plot(CA, MST ,label="Subject-1")

#Adding Labels
plt.xlabel("CA Marks")
plt.ylabel("MidTerm Marks")

#Adding Title and Legend
plt.title("CA Marks vs MidTerm Marks")
plt.legend()

#Adding Grid to the graph
plt.grid(True)

#To display the graph
plt.show()

# Collecting Data

CA = [5, 22, 23, 24, 26, 27]

subject_1 = [0, 14, 14, 12, 14, 17]
subject_2= [7, 14, 15, 16, 17, 18]

#Plot our graphs
plt.plot(CA,subject_1, label='subject-1')

plt.plot(CA,subject_2, label='subject-2')

#Labelling our graph
plt.xlabel('CA Marks')
plt.ylabel('MidTerm Marks')

#Title to my Graphs
plt.title("CA Marks vs MidTerm Marks")

#Giving legend to our graphs
plt.legend()

#Making our graph grided
plt.grid(True)

#Displaying our graph
plt.show()

"""### 6. Formatting the Line in our Graph

Under formatting ,we will be covering three things:
1. Adding marker to your graph
2. Chnging the line texture (You can make it dashed or dotted etc)
3. Changing the colour of your line
4. Changing the width of the line

You can do this in two ways :-

1.By passing a format string and linewidth to your plot() function as follows:
```
pyplot.plot(x_data,y_data,'[marker][line][color]', linewidth=*float_number*)
```
or
```
pyplot.plot(x_data,y_data,'[color][marker][line]', linewidth=*float_number*)
```
*You need to take care of the order while passing a format string*

2. By explicitly passing value to the respective arguments to your plot() function as follows:
```
pyplot.plot(x_data, y_data, color='color_character/hexcode', linestyle=' ',marker=' ', linewidth=' ')
```
"""

""" WAY 1 """
# Collecting Data
CA = [5, 22, 23, 24, 26, 27]
MST  = [0, 14, 14, 12, 14, 17]

#Plot the graph
plt.plot(CA, MST,'o--c',linewidth=2,label="Subject-1")
"""                ^
                   |
            (format string)
          [marker]  [line]  [colour]
           circle   dashed   black
"""

#Adding Labels
plt.xlabel("CA Marks")
plt.ylabel("MidTerm Marks")

#Adding Title and Legend
plt.title("CA Marks vs MidTerm Marks")
plt.legend()

#To display the graph
plt.show()

""" WAY 2 """
# Collecting Data
CA = [5, 22, 23, 24, 26, 27]
MST = [0, 14, 14, 12, 14, 17]

#To increase the size of your figure.
plt.figure(figsize=(16,8))
#Plot the graph
plt.plot(CA, MST,marker='o', linestyle='-.',color='#BC33FF',linewidth=4,label="Subject-1")

#Adding Labels
plt.xlabel("CA Marks")
plt.ylabel("MidTerm Marks")

#Adding Title and Legend
plt.title("CA Marks vs MidTerm Marks")
plt.legend()

#To display the graph
plt.show()

"""### 7. Auto Styling of Graphs
You can autostyle your graphs using the predefined styles in the pyplot module.

You can get the list of available style using the following commands:
```
pyplot.style.available
```
*'available' is a parameter not a method so that is why we are not using any parenthesis/().*

Then you can use it to auto style your graph as follows:


```
pyplot.style.use('name_of_style')
```
"""

plt.style.available

#Collecting Data
CA = [5, 22, 23, 24, 26, 27]
MST = [0, 14, 14, 12, 14, 17]

#Auto Styling our Graphs
plt.style.use('seaborn-dark')

#Plotting the graph
plt.plot(CA, MST,label="Subject-1")

#Adding Labels
plt.xlabel("CA Marks")
plt.ylabel("MidTerm Marks")

#Adding Title and Legend
plt.title("CA Marks vs MidTerm Marks")
plt.legend()

#To display the graph
plt.show()

"""### 8. Saving your Graph(s)

You can save the graph you made to your current working directory or to any other folder by using the following command:

1. Saving to Current Working directory

```
pyplot.savefig("Name_of_Graph.fmt")
# fmt: jpg/jpeg/png etc.
```
2. Saving to a Specified Path

```
pyplot.savefig("Path/Name_of_Graph.fmt")
# fmt: jpg/jpeg/png etc.
```
"""

#Collecting Data
CA = [5, 22, 23, 24, 26, 27]
MST = [0, 14, 14, 12, 14, 17]

#Auto Styling our Graphs
plt.style.use('fivethirtyeight')

#Plotting the graph
plt.plot(CA, MST,label="Subject-1")

#Adding Labels
plt.xlabel("CA Marks")
plt.ylabel("MidTerm Marks")

#Adding Title and Legend
plt.title("CA Marks vs MidTerm Marks")
plt.legend()

#Saving your Graph along with a Specified Path
plt.savefig('/content/sample_data/Line_Graph.png')
#To display the graph
plt.show()

"""# Working on a Real Life Example
So, having learnt the basics this will be more than enough for plotting real life graphs.
So, today we will be extracting live stock market data from yahoo finance and will be making the following graphs:
1. Time vs Closing Price
2. Time vs Opening Price
3. Time vs Opening & Closing Price
"""

import pandas_datareader as web

#Getting the stock data
stock_data = web.DataReader('MSFT', data_source='yahoo', start='2015-06-20', end='2020-06-20')

#display data
stock_data

stock_data['Open']

#Visualize Closing Price History of Microsoft

#AutoStyle our Graph
#plt.style.use('fivethirtyeight')

# Increasing the size of our Canvas
plt.figure(figsize=(16,8))

#Giving Title to our Graph
plt.title("Closing Stock Price of Microsoft for Past 5 Years")

#Plotting the data
plt.plot(stock_data['Close'], color='red', linewidth=0.8, label="Close")

#Labelling our axis
plt.xlabel('Date')
plt.ylabel('Close Price USD ($)')

#Displaying Legend
plt.legend()

#Displaying the Plot
plt.show()

#Visualize Opening Price History of Microsoft

#Increased the size of our canvas
plt.figure(figsize=(16,8))

#If you pass only one list to your plot function then it will become the values for the y axis and the default indexes will be taken
#as your x-axis values.

#Plotting our graph for opening price
plt.plot(stock_data['Open'],color='#FBFB05',linewidth=2, label="Open")

#Label and Title your Graph
plt.xlabel('TimeSpan')
plt.ylabel('Opening Price')

plt.title("Opening Stock Price of Microsoft for Past 5 years")

#Provide a legend to our graph
plt.legend(loc="upper left")

#Display our graph
plt.show()

#Visualize Opening and Closing Price History of Microsoft

# Increasing the size of our Canvas
plt.figure(figsize=(16,8))

#Giving Title to our Graph
plt.title("Opening & Closing Stock Price of Microsoft for Past 5 Years")

#Plotting the data
plt.plot(stock_data['Close'], color='red', linewidth=2, label="Close")
plt.plot(stock_data['Open'], color='blue', linewidth=2, label="Open")

#Labelling our axis
plt.xlabel('Date')
plt.ylabel('Price USD ($)')

#Displaying Legend
plt.legend(loc="upper left")

#Saving your Graphs
plt.savefig("StockPrice.jpg")

#Displaying the Plot
plt.show()

"""### 8. Bar Charts
Bar Graphs are mostly used for comparison

You can simply draw them by using the following code instead of pyplot.plot() method


```
pyplot.bar(x_data,y_data)
```
"""

#Collecting Data
CA = [5, 22, 23, 24, 26, 27]
MST = [0, 14, 14, 12, 14, 17]

#Auto Styling our Graphs
#plt.style.use('fivethirtyeight')

#Plotting the Bar Chart
plt.bar(CA, MST,label="Subject-1")


#Plotting Line Graph along with the Line Chart
plt.plot(CA, MST,label="Subject1-Line", color='black',linestyle='--', marker='o' ,linewidth=0.6)

#Adding Labels
plt.xlabel("CA Marks")
plt.ylabel("MidTerm Marks")

#Adding Title and Legend
plt.title("CA Marks vs MidTerm Marks")
plt.legend(loc="upper left")

#Saving your Graph along with a Specified Path
plt.savefig('/content/sample_data/Bar_Graph.png')
#To display the graph
plt.show()

#Collecting Data
CA = [5, 22, 23, 24, 26, 27]
MST = [0, 14, 14, 12, 14, 17]

#Auto Styling our Graphs
plt.style.use('fivethirtyeight')

#Plotting a Horizontal Bar Chart
plt.barh(CA, MST,label="Subject-1")

#Adding Labels
plt.ylabel("CA Marks")
plt.xlabel("MidTerm Marks")

#Adding Title and Legend
plt.title("CA Marks vs MidTerm Marks")
plt.legend(loc='lower right')

#Saving your Graph along with a Specified Path
plt.savefig('/content/sample_data/Horizontal_Bar_Graph.png')
#To display the graph
plt.show()

"""### Multiple Bar Charts

Usually if we try to make multple bar charts in a single canvas, they overlap each other.

So, we can draw them in the same canvas by shifting each of them on the canvas.

***The default width of a bar chart is 0.8***
"""

import numpy as np

# Collecting Data
CA = [5, 22, 23, 24, 26, 27]
x_data=np.arange(6) #[0,1,2,3,4,5]

subject_1 = [0, 14, 14, 12, 14, 17]
subject_2= [7, 14, 15, 16, 17, 18]

#Plotting the Graphs

#Plotting Graph-1
plt.bar(x_data-0.1,subject_1, label="Subject-1",width=0.2)
#Plotting Graph-2
plt.bar(x_data+0.1,subject_2, label = "Subject-2",width=0.2)

#Labeling the Graphs' axis and Giving a title to the graph
plt.xticks(ticks=x_data,labels=['a','b','c','d','e','f'])

plt.xlabel("CA Marks")
plt.ylabel("MidTerm Marks")
plt.title("CA Marks vs MidTerm Marks")

#Adding Legend
plt.legend(loc="upper left")

#Displaying the graph on the output console.
plt.show()

"""### 9. UseCase of Bar Charts
We will be using the bar charts to find out the performance of class whose students' test and assessment scores are given.
For that we will be plotting a Marks vs NumberOfStudents Graph using BarCharts
"""

#CA Marks
CA = [5, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24,
      24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26,
      26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29]

#MidTerm Marks
MST = [0, 12, 6, 13, 14, 16, 16, 13, 13, 14, 14, 14, 16, 16, 16, 17, 17, 11, 12,
       12, 13, 15, 16, 16, 17, 10, 11, 11, 18, 18, 17, 20, 10, 11, 11, 13, 14, 15,
       16, 16, 17, 17, 18, 19, 19, 11, 13, 14, 16, 17, 18, 19, 20, 12, 12, 12, 18, 16, 20]

from collections import Counter
CA = [5, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24,
      24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26,
      26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29]

counter = Counter(CA)
counter

from collections import Counter
from matplotlib import pyplot as plt

# Data for the x-axis
CA = [5, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24,
      24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26,
      26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29]
#Count the frequency of marks 
CA_counter=Counter(CA)
print(CA_counter)

#Collecting Data
marks=CA_counter.keys()
number_of_students=CA_counter.values()

#Plotting the Marks vs Number Of Students Bar Graph
plt.bar(marks,number_of_students, label="Subject_1_CA")

#Labelling our graph
plt.xlabel("Marks Obtained by Students in CA")
plt.ylabel("Number of Students")

plt.title("Assessment for a Class")
#Giving Legend
plt.legend(loc="upper left")

#Displaying the Graph
plt.show()

from collections import Counter
from matplotlib import pyplot as plt
import numpy as np
# Data for the x-axis
CA = [5, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24,
      24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26,
      26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29]


CA_counter=Counter(CA)
CA_counter


x=np.arange(len(list(CA_counter.keys())))
y=list(CA_counter.values())


plt.barh(x,y)
plt.yticks(ticks=x,labels=list(CA_counter.keys()))

plt.xlabel("Number of Students")
plt.ylabel("Marks Obtained")

plt.show()

"""### 10. Histograms
Used to plot frequency of scores given in a continous range.
"""

from matplotlib import pyplot as plt

#CA Marks
CA = [5, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24,
      24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26,
      26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29]

#Plotting Histogrm
bins_size=[0,5,10,15,20,25,26,28,30]
plt.hist(CA, bins=bins_size, edgecolor="black", label="CA Marks")

#Add Labels
plt.xlabel("Range of Marks Obtained")
plt.ylabel("Frequency of marks/ number of students")

#Add Legend


#Displaying Histogram
plt.show()

"""### 11. Scatter Plots
These are used to find relation between different datasets.
Like here we will be finding a correlation between CA and MidTerm Marks
"""

from matplotlib import pyplot as plt

#CA Marks
CA = [5, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24,
      24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26,
      26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29]

#MidTerm Marks
MST = [0, 12, 6, 13, 14, 16, 16, 13, 13, 14, 14, 14, 16, 16, 16, 17, 17, 11, 12,
       12, 13, 15, 16, 16, 17, 10, 11, 11, 18, 18, 17, 20, 10, 11, 11, 13, 14, 15,
       16, 16, 17, 17, 18, 19, 19, 11, 13, 14, 16, 17, 18, 19, 20, 12, 12, 12, 18, 16, 20]

#Gender
Gender = [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0]

#Plotting Scatter Plot
plt.figure(figsize=(16,8))
scatter_plot = plt.scatter(CA,MST,s=100,cmap='Greens',c=Gender, edgecolors='black')

#Adding Labels and Title
plt.title("Correlation between CA Marks & MidTerm Marks")
plt.xlabel("CA Marks")
plt.ylabel("MidTerm Marks")

#Adding Legend
handles, labels = scatter_plot.legend_elements()
labels=['Female','Male']
plt.legend(handles, labels, loc="upper left", title="Gender")

#Displaying Plot
plt.show()